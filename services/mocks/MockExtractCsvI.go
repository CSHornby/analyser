// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"io"

	mock "github.com/stretchr/testify/mock"
)

// NewMockExtractCsvI creates a new instance of MockExtractCsvI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExtractCsvI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExtractCsvI {
	mock := &MockExtractCsvI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockExtractCsvI is an autogenerated mock type for the ExtractCsvI type
type MockExtractCsvI struct {
	mock.Mock
}

type MockExtractCsvI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExtractCsvI) EXPECT() *MockExtractCsvI_Expecter {
	return &MockExtractCsvI_Expecter{mock: &_m.Mock}
}

// Extract provides a mock function for the type MockExtractCsvI
func (_mock *MockExtractCsvI) Extract(file io.Reader) ([][]string, error) {
	ret := _mock.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for Extract")
	}

	var r0 [][]string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(io.Reader) ([][]string, error)); ok {
		return returnFunc(file)
	}
	if returnFunc, ok := ret.Get(0).(func(io.Reader) [][]string); ok {
		r0 = returnFunc(file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = returnFunc(file)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockExtractCsvI_Extract_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Extract'
type MockExtractCsvI_Extract_Call struct {
	*mock.Call
}

// Extract is a helper method to define mock.On call
//   - file io.Reader
func (_e *MockExtractCsvI_Expecter) Extract(file interface{}) *MockExtractCsvI_Extract_Call {
	return &MockExtractCsvI_Extract_Call{Call: _e.mock.On("Extract", file)}
}

func (_c *MockExtractCsvI_Extract_Call) Run(run func(file io.Reader)) *MockExtractCsvI_Extract_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 io.Reader
		if args[0] != nil {
			arg0 = args[0].(io.Reader)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockExtractCsvI_Extract_Call) Return(records [][]string, err error) *MockExtractCsvI_Extract_Call {
	_c.Call.Return(records, err)
	return _c
}

func (_c *MockExtractCsvI_Extract_Call) RunAndReturn(run func(file io.Reader) ([][]string, error)) *MockExtractCsvI_Extract_Call {
	_c.Call.Return(run)
	return _c
}
