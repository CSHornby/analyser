// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"main/models"

	mock "github.com/stretchr/testify/mock"
)

// NewMockAnalyseI creates a new instance of MockAnalyseI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAnalyseI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAnalyseI {
	mock := &MockAnalyseI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAnalyseI is an autogenerated mock type for the AnalyseI type
type MockAnalyseI struct {
	mock.Mock
}

type MockAnalyseI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAnalyseI) EXPECT() *MockAnalyseI_Expecter {
	return &MockAnalyseI_Expecter{mock: &_m.Mock}
}

// Analyse provides a mock function for the type MockAnalyseI
func (_mock *MockAnalyseI) Analyse(entries []models.Entry) map[string]float64 {
	ret := _mock.Called(entries)

	if len(ret) == 0 {
		panic("no return value specified for Analyse")
	}

	var r0 map[string]float64
	if returnFunc, ok := ret.Get(0).(func([]models.Entry) map[string]float64); ok {
		r0 = returnFunc(entries)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]float64)
		}
	}
	return r0
}

// MockAnalyseI_Analyse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Analyse'
type MockAnalyseI_Analyse_Call struct {
	*mock.Call
}

// Analyse is a helper method to define mock.On call
//   - entries []models.Entry
func (_e *MockAnalyseI_Expecter) Analyse(entries interface{}) *MockAnalyseI_Analyse_Call {
	return &MockAnalyseI_Analyse_Call{Call: _e.mock.On("Analyse", entries)}
}

func (_c *MockAnalyseI_Analyse_Call) Run(run func(entries []models.Entry)) *MockAnalyseI_Analyse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []models.Entry
		if args[0] != nil {
			arg0 = args[0].([]models.Entry)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAnalyseI_Analyse_Call) Return(catagories map[string]float64) *MockAnalyseI_Analyse_Call {
	_c.Call.Return(catagories)
	return _c
}

func (_c *MockAnalyseI_Analyse_Call) RunAndReturn(run func(entries []models.Entry) map[string]float64) *MockAnalyseI_Analyse_Call {
	_c.Call.Return(run)
	return _c
}
