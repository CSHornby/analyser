// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"main/models"

	mock "github.com/stretchr/testify/mock"
)

// NewMockCleanI creates a new instance of MockCleanI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCleanI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCleanI {
	mock := &MockCleanI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCleanI is an autogenerated mock type for the CleanI type
type MockCleanI struct {
	mock.Mock
}

type MockCleanI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCleanI) EXPECT() *MockCleanI_Expecter {
	return &MockCleanI_Expecter{mock: &_m.Mock}
}

// Clean provides a mock function for the type MockCleanI
func (_mock *MockCleanI) Clean(data [][]string) ([]models.Entry, error) {
	ret := _mock.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Clean")
	}

	var r0 []models.Entry
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([][]string) ([]models.Entry, error)); ok {
		return returnFunc(data)
	}
	if returnFunc, ok := ret.Get(0).(func([][]string) []models.Entry); ok {
		r0 = returnFunc(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Entry)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([][]string) error); ok {
		r1 = returnFunc(data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCleanI_Clean_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clean'
type MockCleanI_Clean_Call struct {
	*mock.Call
}

// Clean is a helper method to define mock.On call
//   - data [][]string
func (_e *MockCleanI_Expecter) Clean(data interface{}) *MockCleanI_Clean_Call {
	return &MockCleanI_Clean_Call{Call: _e.mock.On("Clean", data)}
}

func (_c *MockCleanI_Clean_Call) Run(run func(data [][]string)) *MockCleanI_Clean_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 [][]string
		if args[0] != nil {
			arg0 = args[0].([][]string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCleanI_Clean_Call) Return(entries []models.Entry, err error) *MockCleanI_Clean_Call {
	_c.Call.Return(entries, err)
	return _c
}

func (_c *MockCleanI_Clean_Call) RunAndReturn(run func(data [][]string) ([]models.Entry, error)) *MockCleanI_Clean_Call {
	_c.Call.Return(run)
	return _c
}
